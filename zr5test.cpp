#include <string.h>
#include <memory.h>
#include <stdlib.h>
#include <stdio.h>

#include "zr5.h"

// g++ zr5test.cpp zr5.c -o testzr5
int main(int argc, char* argv[])
{
	int			passed = 0;
	int			failed = 0;
	unsigned int	i;
	char		zr5_out_512[64];
	char		test0[] = {	0x01, 0x00, 0x00, 0x00, 0x4e, 0x42, 0xb7, 0x59, 0xbd, 0x65,
							0x68, 0x59, 0x9c, 0xff, 0x71, 0x4b, 0x67, 0x9d, 0xbf, 0x94,
							0x6543c9ba, 0x8444f7b8, 0xb964bf21, 0x71070000, 0xc6bb8526,
							0xc7e59d3b, 0xc92afd77, 0xb11e544a, 0xf69ae0d4, 0xda4f98bc,
							0x6e981f3d, 0xbb20f185, 0xa918e654, 0xffff0b1e, 0x00000000 };
	// three byte test
	char		test1[] = {	0x00, 0x11, 0x22 };
	char	  xpec_k1[] = { 0x94, 0x77, 0x84, 0xf1, 0x39, 0x86, 0x9e, 0xac, 0xae, 0xff,
							0x6b, 0xd6, 0x72, 0x97, 0xa4, 0xfb, 0xb6, 0xec, 0x56, 0x2a,
							0x50, 0xfa, 0x17, 0x4f, 0x95, 0x2c, 0x75, 0x9b, 0x2e, 0x1a,
							0xcf, 0x73, 0xf6, 0xf8, 0x0a, 0x0f, 0x6e, 0x24, 0x12, 0x73,
							0x9a, 0x80, 0xdc, 0xe0, 0x41, 0x45, 0xc5, 0xb4, 0x5b, 0x72,
							0xb1, 0xb7, 0xb1, 0xd2, 0x25, 0x97, 0x23, 0xaa, 0xa7, 0x04,
							0xfa, 0xae, 0x5b, 0xe6 };
	char	xpec1_512[] = {	0xf5, 0x2f, 0x44, 0x4f, 0x7e, 0xe6, 0xa5, 0x0b, 0x19, 0x7c,
							0xc9, 0xf0, 0x3e, 0xd0, 0x2d, 0xbe, 0xec, 0x3d, 0xe9, 0x10,
							0xd1, 0x84, 0xb1, 0xd2, 0x03, 0xc7, 0xf1, 0xe0, 0x45, 0x4e,
							0xd1, 0xb3, 0x28, 0x0a, 0xab, 0x39, 0xdc, 0x67, 0xa6, 0xff,
							0xdb, 0xdb, 0x42, 0x8c, 0x48, 0xce, 0xa4, 0xae, 0x5e, 0xa5,
							0x60, 0x15, 0x4c, 0x8a, 0xd0, 0x16, 0xdd, 0xf3, 0x8d, 0x2e,
							0x7c, 0x49, 0xfc, 0x2e };
	char		xpec1[] = {	0x28, 0x0a, 0xab, 0x39, 0xdc, 0x67, 0xa6, 0xff, 0xdb, 0xdb,
							0x42, 0x8c, 0x48, 0xce, 0xa4, 0xae, 0x5e, 0xa5, 0x60, 0x15,
							0x4c, 0x8a, 0xd0, 0x16, 0xdd, 0xf3, 0x8d, 0x2e, 0x7c, 0x49,
							0xfc, 0x2e };

	// 65 byte test
	char		test2[] = {	0x04, 0xfc, 0x97, 0x02, 0x84, 0x78, 0x40, 0xaa, 0xf1, 0x95,
							0xde, 0x84, 0x42, 0xeb, 0xec, 0xed, 0xf5, 0xb0, 0x95, 0xcd,
							0xbb, 0x9b, 0xc7, 0x16, 0xbd, 0xa9, 0x11, 0x09, 0x71, 0xb2,
							0x8a, 0x49, 0xe0, 0xea, 0xd8, 0x56, 0x4f, 0xf0, 0xdb, 0x22,
							0x20, 0x9e, 0x03, 0x74, 0x78, 0x2c, 0x09, 0x3b, 0xb8, 0x99,
							0x69, 0x2d, 0x52, 0x4e, 0x9d, 0x6a, 0x69, 0x56, 0xe7, 0xc5,
							0xec, 0xbc, 0xd6, 0x82, 0x84 };
	char	  xpec_k2[] = { 0x62, 0xf8, 0xd0, 0xca, 0x61, 0xeb, 0xbe, 0xef, 0x22, 0x31,
							0x37, 0xf5, 0x71, 0xd6, 0x5c, 0xf7, 0x0f, 0x1a, 0x89, 0xce,
							0x44, 0x07, 0x46, 0x83, 0x02, 0x3e, 0x25, 0x8c, 0xa8, 0x48,
							0xb5, 0x23, 0xb7, 0x18, 0x39, 0x67, 0x15, 0x61, 0xf3, 0x5e,
							0x5a, 0x26, 0x50, 0xb0, 0x03, 0x8e, 0xf6, 0xfb, 0x90, 0x7b,
							0xc7, 0xb3, 0x81, 0x2c, 0x34, 0x42, 0x3b, 0x3b, 0xd6, 0x77,
							0xb0, 0x22, 0xa3, 0x39 };
	char	xpec2_512[] = {	0xa7, 0x9c, 0xeb, 0x61, 0x08, 0xa9, 0xe3, 0xf0, 0xcf, 0x4a,
							0xd6, 0xd0, 0x50, 0x46, 0x19, 0x76, 0xaa, 0xae, 0xb1, 0xa4,
							0xa8, 0x5b, 0xcb, 0xb3, 0x84, 0x26, 0x46, 0xf9, 0x9d, 0xf7,
							0xf6, 0xc3, 0x85, 0xff, 0xc1, 0xbf, 0x48, 0x08, 0x41, 0xe3,
							0x65, 0x70, 0xd6, 0x9f, 0xd8, 0x5f, 0xff, 0xe5, 0xd9, 0x21,
							0x66, 0x6c, 0xad, 0x28, 0x8b, 0x70, 0xc9, 0x4a, 0x40, 0xe2,
							0xd4, 0xa2, 0xc9, 0x28 };
	char		xpec2[] = {	0x85, 0xff, 0xc1, 0xbf, 0x48, 0x08, 0x41, 0xe3, 0x65, 0x70,
							0xd6, 0x9f, 0xd8, 0x5f, 0xff, 0xe5, 0xd9, 0x21, 0x66, 0x6c,
							0xad, 0x28, 0x8b, 0x70, 0xc9, 0x4a, 0x40, 0xe2, 0xd4, 0xa2,
							0xc9, 0x28 };

	// 80 byte test
	char		test3[] = {	0x01, 0x80, 0x64, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xb0, 0x32, 0x51,
							0x87, 0xd4, 0xf2, 0x8b, 0x6e, 0x22, 0xf0, 0x86, 0x48, 0x45,
							0xdd, 0xd5, 0x0a, 0xc4, 0xe6, 0xaa, 0x22, 0xa1, 0x70, 0x9f,
							0xfb, 0x42, 0x75, 0xd9, 0x25, 0xf2, 0x66, 0x36, 0x30, 0x0e,
							0xed, 0x54, 0xff, 0xff, 0x0f, 0x1e, 0x2a, 0x9e, 0x23, 0x00 };
	char	  xpec_k3[] = { 0x51, 0xb4, 0x30, 0x9f, 0x78, 0x9f, 0xba, 0xa7, 0xe5, 0xf0,
							0x40, 0x2b, 0x70, 0x07, 0x2a, 0x60, 0xe8, 0xa7, 0x05, 0xb1,
							0x95, 0x92, 0x38, 0x6b, 0xd1, 0x36, 0x37, 0x79, 0x93, 0x5c,
							0x45, 0xf0, 0x11, 0xe1, 0x33, 0x63, 0x49, 0x18, 0x20, 0x95,
							0x03, 0x92, 0x50, 0x2a, 0x9d, 0x3c, 0x1f, 0x76, 0x45, 0x1c,
							0x37, 0x9f, 0x9d, 0x98, 0x3c, 0x98, 0x86, 0x43, 0x22, 0xf2,
							0xec, 0xb9, 0x5f, 0x84 };
	char	xpec3_512[] = {	0xee, 0x0c, 0x3d, 0x3b, 0xe3, 0xdc, 0x49, 0xed, 0x47, 0xa6,
							0x0b, 0xda, 0x98, 0x76, 0x1e, 0xc6, 0x01, 0x2b, 0x8c, 0x3f,
							0x54, 0xc5, 0x86, 0xd1, 0x00, 0x9f, 0xe5, 0x96, 0xef, 0xc5,
							0x4c, 0x35, 0x00, 0x00, 0x03, 0x58, 0x88, 0xfe, 0xa2, 0xf9,
							0x6e, 0x3e, 0xf9, 0x96, 0xbe, 0xda, 0x4f, 0xa4, 0xc4, 0xc4,
							0xd0, 0x3b, 0x37, 0x11, 0x84, 0xd1, 0xf5, 0x75, 0xf9, 0xd1,
							0x44, 0xb7, 0xa1, 0x64 };
	char		xpec3[] = {	0x00, 0x00, 0x03, 0x58, 0x88, 0xfe, 0xa2, 0xf9, 0x6e, 0x3e,
							0xf9, 0x96, 0xbe, 0xda, 0x4f, 0xa4, 0xc4, 0xc4, 0xd0, 0x3b,
							0x37, 0x11, 0x84, 0xd1, 0xf5, 0x75, 0xf9, 0xd1, 0x44, 0xb7,
							0xa1, 0x64 };
	char	xr5_out[64];

	printf("zr5_hash_512 test1 input: ");
	for(i=0; i< sizeof(test1); i++) { printf("%02x", test1[i]); }
	printf("\n");
	printf("%12s", "ExpectedK: ");
	for(i=0; i< sizeof(xpec_k1); i++) { printf("%02x", xpec_k1[i]); }
	printf("\n");
	zr5_hash(test1, zr5_out_512, (uint32_t)sizeof(test1) );
	printf("%12s", "Expected: ");
	for(i=0; i< sizeof(xpec1_512); i++) { printf("%02x", xpec1_512[i]); }
	printf("\n");
	printf("%12s", "Got: ");
	for(i=0; i< sizeof(zr5_out_512); i++) { printf("%02x", zr5_out_512[i]); }
	printf("\n\n");


	printf("zr5_hash_512 test2 input: ");
	for(i=0; i< sizeof(test2); i++) { printf("%02x", test2[i]); }
	printf("\n)");
	printf("%12s", "ExpectedK: ");
	for(i=0; i< sizeof(xpec_k2); i++) { printf("%02x", xpec_k2[i]); }
	printf("\n");
	zr5_hash(test2, zr5_out_512, (uint32_t)sizeof(test2) );

	printf("zr5_hash_512 test3 input: ");
	for(i=0; i< sizeof(test3); i++) { printf("%02x", test3[i]); }
	printf("\n)");
	printf("%12s", "ExpectedK: ");
	for(i=0; i< sizeof(xpec_k3); i++) { printf("%02x", xpec_k3[i]); }
	printf("\n");
	zr5_hash(test3, zr5_out_512, (uint32_t)sizeof(test3) );

/*
	if (strncmp(zr5_out_512, xpec1_512, 64) == 0) {
		passed += 1;
		zr5_hash(test1, zr5_out_512, sizeof(test1) );
		printf("Expected: %32x\n", xpec1);
		printf("Got: %32x\n", zr5_out_512);
		if (strncmp(zr5_out_512, xpec1, 32) == 0) {
			passed += 1;
		}
		else {
			failed += 1;
		}
	}
	else {
		failed += 2;
	}
	zr5_hash(test2, zr5_out_512, sizeof(test2) );
	zr5_hash(test3, zr5_out_512, sizeof(test3) );
*/

	printf("%d tests total.\n", passed+failed);
	printf("%d tests passed.\n", passed);
	printf("%d tests failed.\n", failed);

	return 0;
}

